// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movies.Data;

namespace Movies.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200524194214_AddCharactersTable")]
    partial class AddCharactersTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Movies.Data.Entities.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("18b5831b-40e0-4ab0-9522-a0ab59c02dc1"),
                            MovieId = new Guid("d8bacea7-5208-4e60-9843-c789d6d93c0e"),
                            Name = "Rose"
                        },
                        new
                        {
                            Id = new Guid("54e77bbd-f55f-4f52-a09c-2b47e4c41198"),
                            MovieId = new Guid("d8bacea7-5208-4e60-9843-c789d6d93c0e"),
                            Name = "Jack"
                        });
                });

            modelBuilder.Entity("Movies.Data.Entities.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasWonOscar")
                        .HasColumnType("bit");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8bacea7-5208-4e60-9843-c789d6d93c0e"),
                            HasWonOscar = true,
                            Rating = 7.7999999999999998,
                            Title = "Titanic",
                            Year = 1997
                        },
                        new
                        {
                            Id = new Guid("41f5d223-3457-43f2-b9f4-cf893f78b6c5"),
                            HasWonOscar = false,
                            Rating = 7.7999999999999998,
                            Title = "The Notebook",
                            Year = 2004
                        },
                        new
                        {
                            Id = new Guid("55b19edc-6722-4e06-9c4a-584c4bf9341c"),
                            HasWonOscar = true,
                            Rating = 6.7999999999999998,
                            Title = "Avatar",
                            Year = 2009
                        });
                });

            modelBuilder.Entity("Movies.Data.Entities.Character", b =>
                {
                    b.HasOne("Movies.Data.Entities.Movie", "Movie")
                        .WithMany("Characters")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
